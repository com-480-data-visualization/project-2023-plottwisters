<div class="w-full center">
    <svg id="my_dataviz" width="1500" height="500"></svg>

</div>

<!-- Load d3.js and the geo projection plugin -->
<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

<script>
    import * as d3 from "d3"
    import * as coords from 'country-coords';
    var width = window.innerWidth;
    var svgContainer = d3.select("#my_dataviz")                       
    .attr("width", width)
    const byCountry = coords.byCountry();

    var reader = new FileReader();
  //Copy and paste this      
  document.getElementById('input-file').addEventListener('change', function(e) {
      if (e.target.files.length > 0) {
          console.log("File: ", e.target.files)
          var file = e.target.files[0];
          console.log("File: ", file)
          reader.addEventListener("load", parseFile, false);
          if (file) {
              reader.readAsText(file);
          }
      }
  });


  function parseFile() {
    document.getElementById('pre-content').style.display = "none";
    document.getElementById('content').style.display = "block";

    var fileData = JSON.parse(reader.result);
    console.log("JSON data: ", fileData)
    //Parses the string to a date object
    fileData = fileData.map((data) => ({
        ...data,
        parsedDate: new Date(data.ts),
    }))

    fileData = fileData.map((data) => ({
        ...data,
        value: data.ms_played
    }))

    const grouped = d3.group(fileData, d => d.conn_country)

    let mostListenedTracks: any[] = []

    console.log("most listened tracks", mostListenedTracks)

    for (const [keyC, value] of grouped.entries()) {
        console.log("Grouped by country: ", keyC, value);
        var reduced = value.reduce(function(acc, curr) {
                var key = curr.spotify_track_uri;
                if (acc.hasOwnProperty(key)) {
                    acc[key].value += curr.value;
                } else {
                    acc[key] = {
                        "spotify_track_uri": curr.spotify_track_uri,
                        "value": curr.value,
                        "country": keyC
                    };
                }
                return acc;}, {});
        const reducedArray = Object.values(reduced)
        //Sort the array
        reducedArray.sort(function(a, b) {
            return b.value - a.value;
        });
        console.log("Reduced Arr: ", reducedArray)  
        mostListenedTracks.push(reducedArray[0])
    }
    mostListenedTracks = mostListenedTracks.map(x => ({
        ...x,
        coord: byCountry.get(x.country),
    }))

    //Sum values by same artist name and year
    console.log("Most listened: ", mostListenedTracks)

    //console.log("Reduced ip data: ", reducedArray)


    //Groups data by date.   
    const groupedByTracks = d3.group(fileData, d => d.track_id)
    console.log("Grouped By tracks: ", groupedByTracks)

    // The svg
    var svg = d3.select("#my_dataviz"),
        width = +svg.attr("width"),
        height = +svg.attr("height");
    
    // Map and projection
    var projection = d3.geoMercator()
        .center([0,20])                // GPS of location to zoom on
        .scale(99)                       // This is like the zoom
        .translate([ width/2, height/2 ])
    
        Promise.all([
    d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"), // World shape
        ])
        .then(ready)
        .catch(error => {
            throw error;
        });
    
    function ready(de) {

        const dataGeo = de[0];
        const data = mostListenedTracks;
    
      // Create a color scale
      var allContinent = d3.map(data, function(d){return(d.homecontinent)}).keys()
      var color = d3.scaleOrdinal()
        .domain(allContinent)
        .range(d3.schemePaired);
    
      // Add a scale for bubble size
      var valueExtent = d3.extent(data, function(d) { return +d.n; })
      var size = d3.scaleSqrt()
        .domain(valueExtent)  // What's in the data
        .range([ 1, 50])  // Size in pixel
    
      // Draw the map
      svg.append("g")
          .selectAll("path")
          .data(dataGeo.features)
          .enter()
          .append("path")
            .attr("fill", "#b8b8b8")
            .attr("d", d3.geoPath()
                .projection(projection)
            )
          .style("stroke", "none")
          .style("opacity", .3)
    
      // Add circles:
      svg
        .selectAll("myCircles")
        .data(data.sort(function(a,b) { return +b.n - +a.n }).filter(function(d,i){ return i<1000 }))
        .enter()
        .append("circle")
          .attr("cx", function(d){return projection([+d.coord.longitude, +d.coord.latitude])[0] })
          .attr("cy", function(d){ return projection([+d.coord.longitude, +d.coord.latitude])[1] })
          .attr("r", function(d){ return 10})
          .style("fill", function(d){ return color(d.homecontinent) })
          .attr("stroke", function(d){ if(true){return "black"}else{return "none"}  })
          .attr("stroke-width", 1)
          .attr("fill-opacity", .4)
    
          const trackId = fileData[i].spotify_track_uri.split(":")[2]
    const trackUri = `https://open.spotify.com/embed/track/${trackId}?utm_source=generator`
    const ifrm = document.createElement("iframe");
    console.log("Track URI: ", trackUri)
    ifrm.style.width = "100%";
    ifrm.style.height = "352";
    ifrm.setAttribute("width", "100%")
    ifrm.setAttribute("height", "352")
    ifrm.setAttribute("frameBorder", "0")
    ifrm.setAttribute("id", `iframe-most-played-${i}`)
    ifrm.setAttribute("allow", "autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture")
    ifrm.setAttribute("src", trackUri)
    
      // Add title and explanation
      svg
        .append("text")
          .attr("text-anchor", "end")
          .style("fill", "black")
          .attr("x", width - 10)
          .attr("y", height - 30)
          .attr("width", 90)
          .style("font-size", 14)
    
    
      // --------------- //
      // ADD LEGEND //
      // --------------- //
    
      // Add legend: circles
      var valuesToShow = [100,4000,15000]
      var xCircle = 40
      var xLabel = 90
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("circle")
          .attr("cx", xCircle)
          .attr("cy", function(d){ return height - size(d) } )
          .attr("r", function(d){ return size(d) })
          .style("fill", "none")
          .attr("stroke", "black")
    
      // Add legend: segments
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("line")
          .attr('x1', function(d){ return xCircle + size(d) } )
          .attr('x2', xLabel)
          .attr('y1', function(d){ return height - size(d) } )
          .attr('y2', function(d){ return height - size(d) } )
          .attr('stroke', 'black')
          .style('stroke-dasharray', ('2,2'))
    
      // Add legend: labels
      svg
        .selectAll("legend")
        .data(valuesToShow)
        .enter()
        .append("text")
          .attr('x', xLabel)
          .attr('y', function(d){ return height - size(d) } )
          .text( function(d){ return d } )
          .style("font-size", 10)
          .attr('alignment-baseline', 'middle')
        }
    }   
    
    </script>