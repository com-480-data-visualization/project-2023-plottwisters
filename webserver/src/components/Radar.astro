<div class = "radarChart" >
</div>




<script>
import * as d3 from "d3"

var margin = {
        top: 100,
        right: 100,
        bottom: 100,
        left: 100
    },
    width = Math.min(700, window.innerWidth - 10) - margin.left - margin.right,
    height = Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);



var color = d3.scaleOrdinal()
    .range(["#EDC951", "#CC333F", "#00A0B0"]);

var radarChartOptions = {
    w: width,
    h: height,
    margin: margin,
    maxValue: 0.5,
    levels: 5,
    roundStrokes: true,
    color: color
};

document.addEventListener('fileParsingComplete', function(event) {
		var parsedData = event.detail;
		callbackParsing(parsedData);
	});

function callbackParsing(fileData) {
    console.log("JSON data: ", fileData)
    fileData = fileData.map((data) => ({
            ...data,
            dayOfWeek: new Date(data.ts).getDay()
        }))
        .filter((data) => data.ms_played > 10000)

    const grouped = d3.group(fileData, d => d.dayOfWeek)

    const meanListeningTimesPerDay: any[] = []

    for (let [key, value] of grouped) {
        console.log("Value: ", value)
        const summed = value.reduce((a, b) => a + b.ms_played / 1000, 0) / value.length
        meanListeningTimesPerDay.push({
            "axis": key,
            "value": summed
        })
    }

    console.log("Mean listening times:", meanListeningTimesPerDay)

    RadarChart(".radarChart", [meanListeningTimesPerDay], radarChartOptions);
    document.getElementById("radarChart-title").style.display = "block";
}


function RadarChart(id, data, options) {
    var config = {
        w: 600, 
        h: 600, 
        margin: {
            top: 20,
            right: 20,
            bottom: 20,
            left: 20
        }, 
        levels: 3, 
        maxValue: 0,
        labelFactor: 1.1,
        wrapWidth: 60, 
        opacityArea: 0.35, 
        dotRadius: 4, 
        opacityCircles: 0.1, 
        strokeWidth: 0, 
        roundStrokes: false,
        color: d3.scaleOrdinal(d3.schemeCategory10) //Color function
    };

    console.log("COLOR: ", config.color(0))

    if ('undefined' !== typeof options) {
        for (var i in options) {
            if ('undefined' !== typeof options[i]) {
                config[i] = options[i];
            }
        } //for i
    } //if

    var maxValue = Math.max(config.maxValue, d3.max(data, function(i) {
        return d3.max(i.map(function(o) {
            return o.value;


        }))
    }));

    var allAxis = (data[0].map(function(i, j) {
            return i.axis
        })), //Names of each axis
        total = allAxis.length, //The number of different axes
        radius = Math.min(config.w / 2, config.h / 2), //Radius of the outermost circle
        Format = d3.format('0.1f'), //Percentage formatting
        angleSlice = Math.PI * 2 / total; //The width in radians of each "slice"

    var rScale = d3.scaleLinear()
        .range([0, radius])
        .domain([0, maxValue]);

    var weekday = new Array(7);
    weekday[0] = "Monday";
    weekday[1] = "Tuesday";
    weekday[2] = "Wednesday";
    weekday[3] = "Thursday";
    weekday[4] = "Friday";
    weekday[5] = "Saturday";
    weekday[6] = "Sunday";

    d3.select(id).select("svg").remove();

    var svg = d3.select(id).append("svg")
	.attr("height", config.h + config.margin.top + config.margin.bottom)

        .attr("width", config.w + config.margin.left + config.margin.right)
        .attr("class", "radar" + id);
    var g = svg.append("g")
        .attr("transform", "translate(" + (config.w / 2 + config.margin.left) + "," + (config.h / 2 + config.margin.top) + ")");

    var axisGrid = g.append("g").attr("class", "axisWrapper");

    axisGrid.selectAll(".levels")
        .data(d3.range(1, (config.levels + 1)).reverse())
        .enter()
        .append("circle")
        .attr("class", "gridCircle")
		.style("fill", "#CDCDCD")
        .attr("r", function(d, i) {
            return radius / config.levels * d;
        })
        .style("fill-opacity", config.opacityCircles)
		.style("stroke", "#CDCDCD")


    axisGrid.selectAll(".axisLabel")
        .data(d3.range(1, (config.levels + 1)).reverse())
        .enter().append("text")
        .attr("class", "axisLabel")
        .attr("y", function(d) {
            return -d * radius / config.levels;
        })
		.attr("x", 4)

        .style("font-size", "10px")
        .attr("fill", "#737373")
		.attr("dy", "0.4em")
        .text(function(d, i) {
            return Format(maxValue * d / config.levels) + "seconds";
        });


    var axis = axisGrid.selectAll(".axis")
        .data(allAxis)

        .enter()

        .append("g")

        .attr("class", "axis");

    axis.append("line")
        .attr("x1", 0)
        .attr("y1", 0)
		.style("stroke", "white")
        .attr("x2", function(d, i) {
            return rScale(maxValue * 1.1) * Math.cos(angleSlice * i - Math.PI / 2);
        })
        .attr("y2", function(d, i) {
            return rScale(maxValue * 1.1) * Math.sin(angleSlice * i - Math.PI / 2);
        })
        .attr("class", "line")

        .style("stroke-width", "2px");

    axis.append("text")

        .attr("class", "legend")
        .style("font-size", "11px")
        .attr("text-anchor", "middle")

        .attr("dy", "0.35em")

        .attr("x", function(d, i) {
            return rScale(maxValue * config.labelFactor) * Math.cos(angleSlice * i - Math.PI / 2);
        })
        .attr("y", function(d, i) {
            return rScale(maxValue * config.labelFactor) * Math.sin(angleSlice * i - Math.PI / 2);
        })
        .text(function(d) {
            return weekday[d]
        })
        .call(wrap, config.wrapWidth);


    var radarLine = d3.lineRadial()
        .angle(function(d, i) {
            return i * angleSlice;
        })
        .radius(function(d) {
            return rScale(d.value);
        })

    if (config.roundStrokes) {
        radarLine.curve();
    }

    var bWrapp = g.selectAll(".radarWrapper")
        .data(data)

        .enter().append("g")

        .attr("class", "radarWrapper");

    	bWrapp
        .append("path")
        .attr("class", "radarArea")

        .attr("d", function(d, i) {
            return radarLine(d);
        })
        .style("fill", function(d, i) {
            return config.color(i);
        })
        .style("fill-opacity", config.opacityArea)

    bWrapp.append("path")
        .attr("class", "radarStroke")
        .attr("d", function(d, i) {
            return radarLine(d);
        })
        .style("stroke-width", config.strokeWidth + "px")
        .style("stroke", function(d, i) {
            return config.color(i);
        })
        .style("fill", "none")

    bWrapp.selectAll(".radarCircle")
        .data(function(d, i) {
            return d;
        })
        .enter().append("circle")

        .attr("class", "radarCircle")

        .attr("r", config.dotRadius)

        .attr("cx", function(d, i) {
            console.log("Filling r scale: ", rScale(d.value));
            return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2);
        })
        .attr("cy", function(d, i) {

            return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2);
        })
        .style("fill", function(d, i, j) {
            return "#1f77b4"
        })
        .style("fill-opacity", 0.8);


    var blobCircleWrapper = g.selectAll(".radarCircleWrapper")
        .data(data)

        .enter().append("g")

        .attr("class", "radarCircleWrapper");

    blobCircleWrapper.selectAll(".radarInvisibleCircle")
        .data(function(d, i) {

            return d;
        })

        .enter().append("circle")


        .attr("class", "radarInvisibleCircle")
        .attr("r", config.dotRadius * 1.5)
		
        .attr("cx", function(d, i) {
            return rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2);
        })
        .attr("cy", function(d, i) {
            return rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2);
        })
        .style("fill", "none")
        .style("pointer-events", "all")

     //wrap	

} 
</script>